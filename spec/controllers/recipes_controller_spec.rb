require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe RecipesController, type: :controller do

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RecipesController. Be sure to keep this updated too.
  let(:user) {create(:user)}
  let(:recipe) { create(:recipe, user_id: user.id)}

  let(:attributes) { attributes_for :recipe}

  describe "GET #new" do
    it "assigns a new recipe as @recipe" do
      get :new, {}
      expect(assigns(:recipe)).to be_a_new(Recipe)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Recipe" do
        expect {
          post :create, {:recipe => attributes}
        }.to change(Recipe, :count).by(1)
      end

      it "assigns a newly created recipe as @recipe" do
        post :create, {:recipe => attributes}
        expect(assigns(:recipe)).to be_a(Recipe)
        expect(assigns(:recipe)).to be_persisted
      end

      it "redirects to the created recipe" do
        post :create, {:recipe => attributes}
        expect(response).to redirect_to(Recipe.last)
      end
    end

  end

  describe "GET #show" do
    it "increments click by one" do
      expect {
        get :show, {:id => recipe.id}
        recipe.reload
      }.to change{recipe.clicks}.by(1)
    end
  end


  describe "PUT #update" do
    context "with valid params" do
      let(:new_attr){ attributes_for :recipe}

      it "updates the requested recipe" do
        put :update, {:id => recipe.id, :recipe => new_attr}
        recipe.reload
        expect(flash[:notice]).to eq "Recipe was successfully updated."
      end

      it "redirects to the recipe" do
        put :update, {:id => recipe.id, :recipe => new_attr}
        expect(response).to redirect_to(recipe)
      end
    end

  end

  describe "DELETE #destroy" do
    before do 
      post :create, {:recipe => attributes}
      recipe.reload
    end

    it "destroys the requested recipe" do
      expect {
        delete :destroy, {:id => recipe.id}
      }.to change(Recipe, :count).by(-1)
    end

    it "redirects to the recipes list" do
      delete :destroy, {:id => recipe.id}
      expect(response).to redirect_to(recipes_url)
    end
  end
  
end
